name: Tests (E2E)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "keep/**"
      - "keep-ui/**"
      - "tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: 3.11
  STORAGE_MANAGER_DIRECTORY: /tmp/storage-manager
  # MySQL server environment variables
  MYSQL_ROOT_PASSWORD: keep
  MYSQL_DATABASE: keep
  # Postgres environment variables
  POSTGRES_USER: keepuser
  POSTGRES_PASSWORD: keeppassword
  POSTGRES_DB: keepdb
  # To test if imports are working properly
  EE_ENABLED: true

jobs:
  tests-e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db_type: [mysql, postgres]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: chartboost/ruff-action@v1
        with:
          src: "./keep"

      # These Python-related steps are kept as they're used for running tests directly on the runner
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4.2.0
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies using poetry
        run: poetry install --no-interaction --no-root --with dev

      - name: Get Playwright version from poetry.lock
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(grep "playwright" poetry.lock -A 5 | grep "version" | head -n 1 | cut -d'"' -f2)
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright and dependencies
        run: |
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
            poetry run playwright install --with-deps
          else
            poetry run playwright install-deps
          fi

      # Docker setup with proper layer caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # This is the most important cache for your workflow - Docker layer caching
      - name: Cache Docker layers
        id: cache-docker
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('keep/**', 'keep-ui/**', 'tests/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and start containers with BuildKit layer caching
      - name: Build and start containers
        env:
          DOCKER_BUILDKIT: 1
        run: |
          # Export BuildKit state to cache
          docker buildx create --use --driver docker-container --driver-opt network=host

          # Set cache mount options for Docker Compose
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1

          # Build with cache from and cache to
          docker compose \
            --project-directory . \
            -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml \
            build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg DOCKER_BUILDKIT=1

          # Start the containers
          docker compose \
            --project-directory . \
            -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml \
            up -d

      # Optimize wait times with exponential backoff
      - name: Wait for services to be ready with optimized polling
        run: |
          # Function for exponential backoff
          function wait_for_service() {
            local service_name=$1
            local check_command=$2
            local max_attempts=$3
            local attempt=0
            local wait_time=1

            echo "Waiting for $service_name to be ready..."
            until eval "$check_command"; do
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Max attempts reached, exiting..."
                exit 1
              fi
              echo "Waiting for $service_name... (Attempt: $((attempt+1)), waiting ${wait_time}s)"
              attempt=$((attempt+1))
              sleep $wait_time
              # Exponential backoff with max of 8 seconds
              wait_time=$((wait_time * 2 > 8 ? 8 : wait_time * 2))
            done
            echo "$service_name is ready!"
          }

          # Database checks
          if [ "${{ matrix.db_type }}" == "mysql" ]; then
            wait_for_service "MySQL Database" "docker exec \$(docker ps -qf \"name=keep-database-1\") mysqladmin ping -h \"localhost\" --silent" 10
            wait_for_service "MySQL Database (DB AUTH)" "docker exec \$(docker ps -qf \"name=keep-database-db-auth-1\") mysqladmin ping -h \"localhost\" --silent" 10
          elif [ "${{ matrix.db_type }}" == "postgres" ]; then
            wait_for_service "Postgres Database" "docker exec \$(docker ps -qf \"name=keep-database-1\") pg_isready -h localhost -U keepuser" 10
            wait_for_service "Postgres Database (DB AUTH)" "docker exec \$(docker ps -qf \"name=keep-database-db-auth-1\") pg_isready -h localhost -U keepuser" 10
          fi

          # Service checks
          wait_for_service "Keep backend (DB AUTH)" "curl --output /dev/null --silent --fail http://localhost:8081/healthcheck" 10
          wait_for_service "Keep backend" "curl --output /dev/null --silent --fail http://localhost:8080/healthcheck" 10
          wait_for_service "Keep frontend" "curl --output /dev/null --silent --fail http://localhost:3000/" 10
          wait_for_service "Keep frontend (DB AUTH)" "curl --output /dev/null --silent --fail http://localhost:3001/" 10
          wait_for_service "Grafana" "curl --output /dev/null --silent --fail http://localhost:3002/api/health" 10

      # Run tests using the Python environment on the runner
      - name: Run e2e tests and report coverage
        run: |
          poetry run coverage run --branch -m pytest -s tests/e2e_tests/

      - name: Convert coverage results to JSON (for CodeCov support)
        run: poetry run coverage json --omit="keep/providers/*"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          files: coverage.json
          verbose: true

      # Collect logs
      - name: Dump backend logs
        if: always()
        run: |
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml logs keep-backend > backend_logs-${{ matrix.db_type }}.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml logs keep-frontend > frontend_logs-${{ matrix.db_type }}.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml logs keep-backend-db-auth > backend_logs-${{ matrix.db_type }}-db-auth.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml logs keep-frontend-db-auth > frontend_logs-${{ matrix.db_type }}-db-auth.txt
        continue-on-error: true

      # Upload artifacts
      - name: Upload test artifacts on failure
        if: always()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: test-artifacts-my-artifacts-${{ matrix.db_type }}
          path: |
            playwright_dump_*.html
            playwright_dump_*.png
            backend_logs-${{ matrix.db_type }}.txt
            frontend_logs-${{ matrix.db_type }}.txt
            backend_logs-${{ matrix.db_type }}-db-auth.txt
            frontend_logs-${{ matrix.db_type }}-db-auth.txt
        continue-on-error: true

      # Tear down environment
      - name: Tear down environment
        run: |
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml down
