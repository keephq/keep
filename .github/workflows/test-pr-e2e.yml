name: Tests (E2E)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "keep/**"
      - "keep-ui/**"
      - "tests/**"

# Add permissions for GitHub Container Registry
permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: 3.11
  STORAGE_MANAGER_DIRECTORY: /tmp/storage-manager
  # MySQL server environment variables
  MYSQL_ROOT_PASSWORD: keep
  MYSQL_DATABASE: keep
  # Postgres environment variables
  POSTGRES_USER: keepuser
  POSTGRES_PASSWORD: keeppassword
  POSTGRES_DB: keepdb
  # To test if imports are working properly
  EE_ENABLED: true

jobs:
  # Build images in parallel
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug repository info
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository name: ${{ github.event.repository.name }}"

      - name: Check token permissions
        run: |
          echo "Token permissions: ${{ toJson(github.token_permissions) }}"

      - name: Cache Docker layers for frontend
        id: cache-docker-frontend
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('keep-ui/package.json', 'keep-ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Log frontend cache status
        run: |
          if [ "${{ steps.cache-docker-frontend.outputs.cache-hit }}" == "true" ]; then
            echo "FRONTEND CACHE HIT ✅"
            echo "Cache key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('keep-ui/package.json', 'keep-ui/package-lock.json') }}"
          else
            echo "FRONTEND CACHE MISS ❌"
            echo "New cache will be created with key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('keep-ui/package.json', 'keep-ui/package-lock.json') }}"
          fi

      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: keep-ui
          file: ./docker/Dockerfile.ui
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/keep-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache-frontend
          mv /tmp/.buildx-cache-frontend-new /tmp/.buildx-cache-frontend

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug repository info
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository name: ${{ github.event.repository.name }}"

      - name: Check token permissions
        run: |
          echo "Token permissions: ${{ toJson(github.token_permissions) }}"

      - name: Cache Docker layers for backend
        id: cache-docker-backend
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache-backend
          key: ${{ runner.os }}-buildx-backend-${{ hashFiles('poetry.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - name: Log backend cache status
        run: |
          if [ "${{ steps.cache-docker-backend.outputs.cache-hit }}" == "true" ]; then
            echo "BACKEND CACHE HIT ✅"
            echo "Cache key: ${{ runner.os }}-buildx-backend-${{ hashFiles('poetry.lock', 'pyproject.toml') }}"
          else
            echo "BACKEND CACHE MISS ❌"
            echo "New cache will be created with key: ${{ runner.os }}-buildx-backend-${{ hashFiles('poetry.lock', 'pyproject.toml') }}"
          fi

      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/keep-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-backend
          cache-to: type=local,dest=/tmp/.buildx-cache-backend-new

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache-backend
          mv /tmp/.buildx-cache-backend-new /tmp/.buildx-cache-backend

  # Run tests
  run-tests:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        db_type: [mysql, postgres]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: chartboost/ruff-action@v1
        with:
          src: "./keep"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4.2.0
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies using poetry
        run: poetry install --no-interaction --no-root --with dev

      - name: Get Playwright version from poetry.lock
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(grep "playwright" poetry.lock -A 5 | grep "version" | head -n 1 | cut -d'"' -f2)
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright and dependencies
        run: |
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
            poetry run playwright install --with-deps
          else
            poetry run playwright install-deps
          fi

      # Create a modified compose file with our built images
      - name: Create modified docker-compose file with built images
        run: |
          cp tests/e2e_tests/docker-compose-e2e-${{ matrix.db_type }}.yml tests/e2e_tests/docker-compose-modified.yml

          # Replace image placeholders with actual image references
          sed -i "s|%KEEPFRONTEND_IMAGE%|ghcr.io/${{ github.repository_owner }}/keep-frontend:${{ github.sha }}|g" tests/e2e_tests/docker-compose-modified.yml
          sed -i "s|%KEEPBACKEND_IMAGE%|ghcr.io/${{ github.repository_owner }}/keep-backend:${{ github.sha }}|g" tests/e2e_tests/docker-compose-modified.yml
          sed -i "s|%KEEPFRONTEND_DB_AUTH_IMAGE%|ghcr.io/${{ github.repository_owner }}/keep-frontend-db-auth:${{ github.sha }}|g" tests/e2e_tests/docker-compose-modified.yml
          sed -i "s|%KEEPBACKEND_DB_AUTH_IMAGE%|ghcr.io/${{ github.repository_owner }}/keep-backend-db-auth:${{ github.sha }}|g" tests/e2e_tests/docker-compose-modified.yml

          # Check the result
          cat tests/e2e_tests/docker-compose-modified.yml

      # Start containers using the pre-built images
      - name: Start Docker containers
        run: |
          docker compose \
            --project-directory . \
            -f tests/e2e_tests/docker-compose-modified.yml \
            pull

          docker compose \
            --project-directory . \
            -f tests/e2e_tests/docker-compose-modified.yml \
            up -d

      # Optimize wait times with exponential backoff
      - name: Wait for services to be ready with optimized polling
        run: |
          # Function for exponential backoff
          function wait_for_service() {
            local service_name=$1
            local check_command=$2
            local max_attempts=$3
            local compose_service=$4  # Docker Compose service name
            local attempt=0
            local wait_time=1

            echo "Waiting for $service_name to be ready..."
            until eval "$check_command"; do
              if [ "$attempt" -ge "$max_attempts" ]; then
                echo "Max attempts reached, exiting..."
                # Show final logs before exiting
                if [ ! -z "$compose_service" ]; then
                  echo "===== FINAL LOGS FOR $compose_service ====="
                  docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs $compose_service --tail 50
                  echo "=========================================="
                fi
                exit 1
              fi

              echo "Waiting for $service_name... (Attempt: $((attempt+1)), waiting ${wait_time}s)"

              # Print logs using docker-compose
              if [ ! -z "$compose_service" ]; then
                echo "===== RECENT LOGS FOR $compose_service ====="
                docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs $compose_service --tail 20
                echo "=========================================="
              fi

              attempt=$((attempt+1))
              sleep $wait_time
              # Exponential backoff with max of 8 seconds
              wait_time=$((wait_time * 2 > 8 ? 8 : wait_time * 2))
            done
            echo "$service_name is ready!"
          }

          # Database checks
          if [ "${{ matrix.db_type }}" == "mysql" ]; then
            wait_for_service "MySQL Database" "docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml exec -T keep-database mysqladmin ping -h \"localhost\" --silent" 10 "keep-database"
            wait_for_service "MySQL Database (DB AUTH)" "docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml exec -T keep-database-db-auth mysqladmin ping -h \"localhost\" --silent" 10 "keep-database-db-auth"
          elif [ "${{ matrix.db_type }}" == "postgres" ]; then
            wait_for_service "Postgres Database" "docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml exec -T keep-database pg_isready -h localhost -U keepuser" 10 "keep-database"
            wait_for_service "Postgres Database (DB AUTH)" "docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml exec -T keep-database-db-auth pg_isready -h localhost -U keepuser" 10 "keep-database-db-auth"
          fi

          # Service checks with log visibility
          wait_for_service "Keep backend (DB AUTH)" "curl --output /dev/null --silent --fail http://localhost:8081/healthcheck" 15 "keep-backend-db-auth"
          wait_for_service "Keep backend" "curl --output /dev/null --silent --fail http://localhost:8080/healthcheck" 15 "keep-backend"
          wait_for_service "Keep frontend" "curl --output /dev/null --silent --fail http://localhost:3000/" 15 "keep-frontend"
          wait_for_service "Keep frontend (DB AUTH)" "curl --output /dev/null --silent --fail http://localhost:3001/" 15 "keep-frontend-db-auth"
          wait_for_service "Grafana" "curl --output /dev/null --silent --fail http://localhost:3002/api/health" 10 "grafana"

      # Run tests
      - name: Run e2e tests and report coverage
        run: |
          poetry run coverage run --branch -m pytest -s tests/e2e_tests/

      - name: Convert coverage results to JSON (for CodeCov support)
        run: poetry run coverage json --omit="keep/providers/*"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          files: coverage.json
          verbose: true

      # Collect logs
      - name: Dump backend logs
        if: always()
        run: |
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs keep-backend > backend_logs-${{ matrix.db_type }}.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs keep-frontend > frontend_logs-${{ matrix.db_type }}.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs keep-backend-db-auth > backend_logs-${{ matrix.db_type }}-db-auth.txt
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml logs keep-frontend-db-auth > frontend_logs-${{ matrix.db_type }}-db-auth.txt
        continue-on-error: true

      # Upload artifacts
      - name: Upload test artifacts on failure
        if: always()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: test-artifacts-my-artifacts-${{ matrix.db_type }}
          path: |
            playwright_dump_*.html
            playwright_dump_*.png
            backend_logs-${{ matrix.db_type }}.txt
            frontend_logs-${{ matrix.db_type }}.txt
            backend_logs-${{ matrix.db_type }}-db-auth.txt
            frontend_logs-${{ matrix.db_type }}-db-auth.txt
        continue-on-error: true

      # Tear down environment
      - name: Tear down environment
        run: |
          docker compose --project-directory . -f tests/e2e_tests/docker-compose-modified.yml down
