"""Dedup

Revision ID: 493f217af6b6
Revises: 5d7ae55efc6a
Create Date: 2024-09-19 15:26:21.564118

"""

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = "493f217af6b6"
down_revision = "5d7ae55efc6a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "alertdeduplicationevent",
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("date_hour", sa.DateTime(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "deduplication_rule_id", sqlmodel.sql.sqltypes.GUID(), nullable=False
        ),
        sa.Column(
            "deduplication_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("provider_type", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_alert_deduplication_event_provider_id",
        "alertdeduplicationevent",
        ["provider_id"],
        unique=False,
    )
    op.create_index(
        "ix_alert_deduplication_event_provider_id_date_hour",
        "alertdeduplicationevent",
        ["provider_id", "date_hour"],
        unique=False,
    )
    op.create_index(
        "ix_alert_deduplication_event_provider_type",
        "alertdeduplicationevent",
        ["provider_type"],
        unique=False,
    )
    op.create_index(
        "ix_alert_deduplication_event_provider_type_date_hour",
        "alertdeduplicationevent",
        ["provider_type", "date_hour"],
        unique=False,
    )
    op.create_index(
        op.f("ix_alertdeduplicationevent_tenant_id"),
        "alertdeduplicationevent",
        ["tenant_id"],
        unique=False,
    )
    op.create_table(
        "alertdeduplicationrule",
        sa.Column("fingerprint_fields", sa.JSON(), nullable=True),
        sa.Column("ignore_fields", sa.JSON(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("provider_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_updated", sa.DateTime(), nullable=False),
        sa.Column(
            "last_updated_by", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("full_deduplication", sa.Boolean(), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_alertdeduplicationrule_name"),
        "alertdeduplicationrule",
        ["name"],
        unique=False,
    )
    op.create_table(
        "alertfield",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("field_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("provider_type", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "field_name", name="uq_tenant_field"),
    )
    op.create_index(
        "ix_alert_field_provider_id_provider_type",
        "alertfield",
        ["provider_id", "provider_type"],
        unique=False,
    )
    op.create_index(
        "ix_alert_field_tenant_id", "alertfield", ["tenant_id"], unique=False
    )
    op.create_index(
        "ix_alert_field_tenant_id_field_name",
        "alertfield",
        ["tenant_id", "field_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_alertfield_field_name"), "alertfield", ["field_name"], unique=False
    )
    op.create_index(
        op.f("ix_alertfield_provider_id"), "alertfield", ["provider_id"], unique=False
    )
    op.create_index(
        op.f("ix_alertfield_provider_type"),
        "alertfield",
        ["provider_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_alertfield_tenant_id"), "alertfield", ["tenant_id"], unique=False
    )
    op.drop_table("alertdeduplicationfilter")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "alertdeduplicationfilter",
        sa.Column("fields", sqlite.JSON(), nullable=True),
        sa.Column("id", sa.CHAR(length=32), nullable=False),
        sa.Column("tenant_id", sa.VARCHAR(), nullable=False),
        sa.Column("matcher_cel", sa.VARCHAR(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index(op.f("ix_alertfield_tenant_id"), table_name="alertfield")
    op.drop_index(op.f("ix_alertfield_provider_type"), table_name="alertfield")
    op.drop_index(op.f("ix_alertfield_provider_id"), table_name="alertfield")
    op.drop_index(op.f("ix_alertfield_field_name"), table_name="alertfield")
    op.drop_index("ix_alert_field_tenant_id_field_name", table_name="alertfield")
    op.drop_index("ix_alert_field_tenant_id", table_name="alertfield")
    op.drop_index("ix_alert_field_provider_id_provider_type", table_name="alertfield")
    op.drop_table("alertfield")
    op.drop_index(
        op.f("ix_alertdeduplicationrule_name"), table_name="alertdeduplicationrule"
    )
    op.drop_table("alertdeduplicationrule")
    op.drop_index(
        op.f("ix_alertdeduplicationevent_tenant_id"),
        table_name="alertdeduplicationevent",
    )
    op.drop_index(
        "ix_alert_deduplication_event_provider_type_date_hour",
        table_name="alertdeduplicationevent",
    )
    op.drop_index(
        "ix_alert_deduplication_event_provider_type",
        table_name="alertdeduplicationevent",
    )
    op.drop_index(
        "ix_alert_deduplication_event_provider_id_date_hour",
        table_name="alertdeduplicationevent",
    )
    op.drop_index(
        "ix_alert_deduplication_event_provider_id", table_name="alertdeduplicationevent"
    )
    op.drop_table("alertdeduplicationevent")
    # ### end Alembic commands ###
