"""Enrichment Event

Revision ID: 21d314490e6a
Revises: 908d95386e29
Create Date: 2025-02-11 12:59:12.987863

"""

import json

import sqlalchemy as sa
import sqlalchemy_utils
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "21d314490e6a"
down_revision = "908d95386e29"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "enrichmentevent",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("enriched_fields", sa.JSON(), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "enrichment_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("rule_id", sa.Integer(), nullable=True),
        sa.Column(
            "alert_id",
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column("date_hour", sa.DateTime(), nullable=True),
        # @tb: we might sometime save the alert_id before the alert is actually created
        # sa.ForeignKeyConstraint(["alert_id"], ["alert.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("enrichmentevent", schema=None) as batch_op:
        batch_op.create_index(
            "ix_enrichment_event_alert_id", ["alert_id"], unique=False
        )
        batch_op.create_index("ix_enrichment_event_rule_id", ["rule_id"], unique=False)
        batch_op.create_index("ix_enrichment_event_status", ["status"], unique=False)
        batch_op.create_index(
            "ix_enrichment_event_tenant_id_date_hour",
            ["tenant_id", "date_hour"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_enrichmentevent_tenant_id"), ["tenant_id"], unique=False
        )

    op.create_table(
        "enrichmentlog",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("enrichment_event_id", sa.Uuid(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("message", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["enrichment_event_id"], ["enrichmentevent.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("enrichmentlog", schema=None) as batch_op:
        batch_op.create_index(
            "ix_enrichment_log_enrichment_event_id",
            ["enrichment_event_id"],
            unique=False,
        )
        batch_op.create_index(
            "ix_enrichment_log_tenant_id_timestamp",
            ["tenant_id", "timestamp"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_enrichmentlog_tenant_id"), ["tenant_id"], unique=False
        )

    # Transform old matchers format to new format
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id, matchers FROM mappingrule"))
    for row in result:
        old_matchers = row.matchers
        if isinstance(old_matchers, str):
            old_matchers = json.loads(old_matchers)
        new_matchers = []
        for matcher in old_matchers:
            m = matcher.split("&&") if isinstance(matcher, str) else matcher
            m = [s.strip() for s in m]
            new_matchers.append(m)
        connection.execute(
            sa.text("UPDATE mappingrule SET matchers = :new_matchers WHERE id = :id"),
            {"new_matchers": json.dumps(new_matchers), "id": row.id},
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("enrichmentlog", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_enrichmentlog_tenant_id"))
        batch_op.drop_index("ix_enrichment_log_tenant_id_timestamp")
        batch_op.drop_index("ix_enrichment_log_enrichment_event_id")

    op.drop_table("enrichmentlog")
    with op.batch_alter_table("enrichmentevent", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_enrichmentevent_tenant_id"))
        batch_op.drop_index("ix_enrichment_event_tenant_id_date_hour")
        batch_op.drop_index("ix_enrichment_event_status")
        batch_op.drop_index("ix_enrichment_event_rule_id")
        batch_op.drop_index("ix_enrichment_event_alert_id")

    op.drop_table("enrichmentevent")
    # ### end Alembic commands ###
