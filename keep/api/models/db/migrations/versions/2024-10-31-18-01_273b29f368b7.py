"""Adding AI tables

Revision ID: 273b29f368b7
Revises: 991b30bcf0b9
Create Date: 2024-10-31 18:01:17.427403

"""

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "273b29f368b7"
down_revision = "991b30bcf0b9"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "aisuggestion",
        sa.Column("suggestion_input", sa.JSON(), nullable=True),
        sa.Column("suggestion_content", sa.JSON(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "suggestion_input_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "suggestion_type",
            sa.Enum(
                "INCIDENT_SUGGESTION",
                "SUMMARY_GENERATION",
                "OTHER",
                name="aisuggestiontype",
            ),
            nullable=False,
        ),
        sa.Column("model", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("aisuggestion", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_aisuggestion_suggestion_input_hash"),
            ["suggestion_input_hash"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_aisuggestion_suggestion_type"),
            ["suggestion_type"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_aisuggestion_tenant_id"), ["tenant_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_aisuggestion_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "aifeedback",
        sa.Column("feedback_content", sa.JSON(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False),
        sa.Column("suggestion_id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=True),
        sa.Column("comment", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["suggestion_id"],
            ["aisuggestion.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("aifeedback", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_aifeedback_suggestion_id"), ["suggestion_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_aifeedback_user_id"), ["user_id"], unique=False
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("aifeedback", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_aifeedback_user_id"))
        batch_op.drop_index(batch_op.f("ix_aifeedback_suggestion_id"))

    op.drop_table("aifeedback")
    with op.batch_alter_table("aisuggestion", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_aisuggestion_user_id"))
        batch_op.drop_index(batch_op.f("ix_aisuggestion_tenant_id"))
        batch_op.drop_index(batch_op.f("ix_aisuggestion_suggestion_type"))
        batch_op.drop_index(batch_op.f("ix_aisuggestion_suggestion_input_hash"))

    op.drop_table("aisuggestion")
    # ### end Alembic commands ###
