"""Add provider logs table

Revision ID: baf8af5776a4
Revises: c6e5594c99f8
Create Date: 2024-12-10 16:07:24.678250

"""

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "baf8af5776a4"
down_revision = "c6e5594c99f8"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "providerexecutionlog",
        sa.Column("log_message", sa.TEXT(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tenant_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("log_level", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("execution_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["provider.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # Create indexes based on database type
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    dialect_name = inspector.dialect.name

    if dialect_name == "postgresql":
        op.create_index(
            "idx_provider_logs_tenant_provider",
            "providerexecutionlog",
            ["tenant_id", "provider_id"],
            postgresql_using="btree",
        )
        op.create_index(
            "idx_provider_logs_timestamp",
            "providerexecutionlog",
            ["timestamp"],
            postgresql_using="btree",
        )
    elif dialect_name == "mysql":
        op.create_index(
            "idx_provider_logs_tenant_provider",
            "providerexecutionlog",
            ["tenant_id", "provider_id"],
            mysql_using="btree",
        )
        op.create_index(
            "idx_provider_logs_timestamp",
            "providerexecutionlog",
            ["timestamp"],
            mysql_using="btree",
        )
    else:  # sqlite
        op.create_index(
            "idx_provider_logs_tenant_provider",
            "providerexecutionlog",
            ["tenant_id", "provider_id"],
        )
        op.create_index(
            "idx_provider_logs_timestamp", "providerexecutionlog", ["timestamp"]
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###    # Drop indexes first
    op.drop_index(
        "idx_provider_logs_tenant_provider", table_name="providerexecutionlog"
    )
    op.drop_index("idx_provider_logs_timestamp", table_name="providerexecutionlog")

    op.drop_table("providerexecutionlog")
    # ### end Alembic commands ###
