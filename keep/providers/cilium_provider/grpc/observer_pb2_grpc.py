# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

import keep.providers.cilium_provider.grpc.observer_pb2 as observer__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

# Shahar: commented out the following code
"""
if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in observer_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )
"""


class ObserverStub(object):
    """Observer returns a stream of Flows depending on which filter the user want
    to observe.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFlows = channel.unary_stream(
            "/observer.Observer/GetFlows",
            request_serializer=observer__pb2.GetFlowsRequest.SerializeToString,
            response_deserializer=observer__pb2.GetFlowsResponse.FromString,
            _registered_method=True,
        )
        self.GetAgentEvents = channel.unary_stream(
            "/observer.Observer/GetAgentEvents",
            request_serializer=observer__pb2.GetAgentEventsRequest.SerializeToString,
            response_deserializer=observer__pb2.GetAgentEventsResponse.FromString,
            _registered_method=True,
        )
        self.GetDebugEvents = channel.unary_stream(
            "/observer.Observer/GetDebugEvents",
            request_serializer=observer__pb2.GetDebugEventsRequest.SerializeToString,
            response_deserializer=observer__pb2.GetDebugEventsResponse.FromString,
            _registered_method=True,
        )
        self.GetNodes = channel.unary_unary(
            "/observer.Observer/GetNodes",
            request_serializer=observer__pb2.GetNodesRequest.SerializeToString,
            response_deserializer=observer__pb2.GetNodesResponse.FromString,
            _registered_method=True,
        )
        self.GetNamespaces = channel.unary_unary(
            "/observer.Observer/GetNamespaces",
            request_serializer=observer__pb2.GetNamespacesRequest.SerializeToString,
            response_deserializer=observer__pb2.GetNamespacesResponse.FromString,
            _registered_method=True,
        )
        self.ServerStatus = channel.unary_unary(
            "/observer.Observer/ServerStatus",
            request_serializer=observer__pb2.ServerStatusRequest.SerializeToString,
            response_deserializer=observer__pb2.ServerStatusResponse.FromString,
            _registered_method=True,
        )


class ObserverServicer(object):
    """Observer returns a stream of Flows depending on which filter the user want
    to observe.
    """

    def GetFlows(self, request, context):
        """GetFlows returning structured data, meant to eventually obsolete GetLastNFlows."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAgentEvents(self, request, context):
        """GetAgentEvents returns Cilium agent events."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetDebugEvents(self, request, context):
        """GetDebugEvents returns Cilium datapath debug events."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodes(self, request, context):
        """GetNodes returns information about nodes in a cluster."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNamespaces(self, request, context):
        """GetNamespaces returns information about namespaces in a cluster.
        The namespaces returned are namespaces which have had network flows in
        the last hour. The namespaces are returned sorted by cluster name and
        namespace in ascending order.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ServerStatus(self, request, context):
        """ServerStatus returns some details about the running hubble server."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ObserverServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetFlows": grpc.unary_stream_rpc_method_handler(
            servicer.GetFlows,
            request_deserializer=observer__pb2.GetFlowsRequest.FromString,
            response_serializer=observer__pb2.GetFlowsResponse.SerializeToString,
        ),
        "GetAgentEvents": grpc.unary_stream_rpc_method_handler(
            servicer.GetAgentEvents,
            request_deserializer=observer__pb2.GetAgentEventsRequest.FromString,
            response_serializer=observer__pb2.GetAgentEventsResponse.SerializeToString,
        ),
        "GetDebugEvents": grpc.unary_stream_rpc_method_handler(
            servicer.GetDebugEvents,
            request_deserializer=observer__pb2.GetDebugEventsRequest.FromString,
            response_serializer=observer__pb2.GetDebugEventsResponse.SerializeToString,
        ),
        "GetNodes": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodes,
            request_deserializer=observer__pb2.GetNodesRequest.FromString,
            response_serializer=observer__pb2.GetNodesResponse.SerializeToString,
        ),
        "GetNamespaces": grpc.unary_unary_rpc_method_handler(
            servicer.GetNamespaces,
            request_deserializer=observer__pb2.GetNamespacesRequest.FromString,
            response_serializer=observer__pb2.GetNamespacesResponse.SerializeToString,
        ),
        "ServerStatus": grpc.unary_unary_rpc_method_handler(
            servicer.ServerStatus,
            request_deserializer=observer__pb2.ServerStatusRequest.FromString,
            response_serializer=observer__pb2.ServerStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "observer.Observer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("observer.Observer", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Observer(object):
    """Observer returns a stream of Flows depending on which filter the user want
    to observe.
    """

    @staticmethod
    def GetFlows(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/observer.Observer/GetFlows",
            observer__pb2.GetFlowsRequest.SerializeToString,
            observer__pb2.GetFlowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetAgentEvents(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/observer.Observer/GetAgentEvents",
            observer__pb2.GetAgentEventsRequest.SerializeToString,
            observer__pb2.GetAgentEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetDebugEvents(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/observer.Observer/GetDebugEvents",
            observer__pb2.GetDebugEventsRequest.SerializeToString,
            observer__pb2.GetDebugEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/observer.Observer/GetNodes",
            observer__pb2.GetNodesRequest.SerializeToString,
            observer__pb2.GetNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNamespaces(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/observer.Observer/GetNamespaces",
            observer__pb2.GetNamespacesRequest.SerializeToString,
            observer__pb2.GetNamespacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ServerStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/observer.Observer/ServerStatus",
            observer__pb2.ServerStatusRequest.SerializeToString,
            observer__pb2.ServerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
