[
  {
    "input_cel": "alert.severity == null",
    "description": "Equality with null",
    "expected_sql_dialect_based": {
      "mysql": "COALESCE(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"severity\"')), JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"severity\"'))) IS NULL",
      "postgresql": "COALESCE((alert_enrichments) ->> 'severity', (alert_event) ->> 'severity') IS NULL",
      "sqlite": "COALESCE(json_extract(alert_enrichments, '$.\"severity\"'), json_extract(alert_event, '$.\"severity\"')) IS NULL"
    }
  },
  {
    "input_cel": "alert.severity == 'HIGH'",
    "description": "Queried field refers to multiple JSON columns",
    "expected_sql_dialect_based": {
      "mysql": "COALESCE(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"severity\"')), JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"severity\"'))) = 'HIGH'",
      "postgresql": "COALESCE(((alert_enrichments) ->> 'severity')::TEXT, ((alert_event) ->> 'severity')::TEXT) = 'HIGH'",
      "sqlite": "COALESCE(CAST(json_extract(alert_enrichments, '$.\"severity\"') as TEXT), CAST(json_extract(alert_event, '$.\"severity\"') as TEXT)) = 'HIGH'"
    }
  },
  {
    "input_cel": "name != 'Payments incident'",
    "description": "Queried field refers to multiple columns",
    "expected_sql_dialect_based": {
      "mysql": "COALESCE(user_generated_name, ai_generated_name) != 'Payments incident'",
      "postgresql": "COALESCE(user_generated_name, ai_generated_name) != 'Payments incident'",
      "sqlite": "COALESCE(user_generated_name, ai_generated_name) != 'Payments incident'"
    }
  },
  {
    "input_cel": "name in ['Payments incident', 'API incident', 'Network incident', null]",
    "description": "IN operator along with NULL",
    "expected_sql_dialect_based": {
      "mysql": "(COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL)",
      "postgresql": "(COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL)",
      "sqlite": "(COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL)"
    }
  },
  {
    "input_cel": "!(name in ['Payments incident', 'API incident', 'Network incident', null])",
    "description": "IN operator along with NOT and NULL",
    "expected_sql_dialect_based": {
      "mysql": "NOT ((COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL))",
      "postgresql": "NOT ((COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL))",
      "sqlite": "NOT ((COALESCE(user_generated_name, ai_generated_name) in ('Payments incident', 'API incident', 'Network incident') OR COALESCE(user_generated_name, ai_generated_name) IS NULL))"
    }
  },
  {
    "input_cel": "alert.provider_type == 'grafana'",
    "description": "Queried field refers to one column",
    "expected_sql_dialect_based": {
      "mysql": "incident_alert_provider_type = 'grafana'",
      "sqlite": "incident_alert_provider_type = 'grafana'",
      "postgresql": "incident_alert_provider_type = 'grafana'"
    }
  },
  {
    "input_cel": "alert.provider_type.contains('graf')",
    "description": "Contains operator with field refering to one column",
    "expected_sql_dialect_based": {
      "sqlite": "incident_alert_provider_type IS NOT NULL AND incident_alert_provider_type LIKE '%graf%'",
      "mysql": "incident_alert_provider_type IS NOT NULL AND LOWER(incident_alert_provider_type) LIKE '%graf%'",
      "postgresql": "incident_alert_provider_type IS NOT NULL AND incident_alert_provider_type ILIKE '%graf%'"
    }
  },
  {
    "input_cel": "alert.some_json_prop.contains('lorem')",
    "description": "Contains operator with field refering to multiple JSON columns",
    "expected_sql_dialect_based": {
      "sqlite": "(json_extract(alert_enrichments, '$.\"some_json_prop\"') IS NOT NULL AND json_extract(alert_enrichments, '$.\"some_json_prop\"') LIKE '%lorem%' OR json_extract(alert_event, '$.\"some_json_prop\"') IS NOT NULL AND json_extract(alert_event, '$.\"some_json_prop\"') LIKE '%lorem%')",
      "mysql": "(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"some_json_prop\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"some_json_prop\"'))) LIKE '%lorem%' OR JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"some_json_prop\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"some_json_prop\"'))) LIKE '%lorem%')",
      "postgresql": "((alert_enrichments) ->> 'some_json_prop' IS NOT NULL AND (alert_enrichments) ->> 'some_json_prop' ILIKE '%lorem%' OR (alert_event) ->> 'some_json_prop' IS NOT NULL AND (alert_event) ->> 'some_json_prop' ILIKE '%lorem%')"
    }
  },
  {
    "input_cel": "alert['tags'].someTag.contains('lorem')",
    "description": "Contains with indexed field access",
    "expected_sql_dialect_based": {
      "sqlite": "json_extract(alert_event, '$.\"tagsContainer\".\"someTag\"') IS NOT NULL AND json_extract(alert_event, '$.\"tagsContainer\".\"someTag\"') LIKE '%lorem%'",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"someTag\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"someTag\"'))) LIKE '%lorem%'",
      "postgresql": "(alert_event -> 'tagsContainer') ->> 'someTag' IS NOT NULL AND (alert_event -> 'tagsContainer') ->> 'someTag' ILIKE '%lorem%'"
    }
  },
  {
    "input_cel": "alert.some_json_prop.contains(100500)",
    "description": "Contains operator with arg not string",
    "expected_sql_dialect_based": {
      "sqlite": "(json_extract(alert_enrichments, '$.\"some_json_prop\"') IS NOT NULL AND json_extract(alert_enrichments, '$.\"some_json_prop\"') LIKE '%100500%' OR json_extract(alert_event, '$.\"some_json_prop\"') IS NOT NULL AND json_extract(alert_event, '$.\"some_json_prop\"') LIKE '%100500%')",
      "mysql": "(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"some_json_prop\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"some_json_prop\"'))) LIKE '%100500%' OR JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"some_json_prop\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"some_json_prop\"'))) LIKE '%100500%')",
      "postgresql": "((alert_enrichments) ->> 'some_json_prop' IS NOT NULL AND (alert_enrichments) ->> 'some_json_prop' ILIKE '%100500%' OR (alert_event) ->> 'some_json_prop' IS NOT NULL AND (alert_event) ->> 'some_json_prop' ILIKE '%100500%')"
    }
  },
  {
    "input_cel": "created_at >= '2025-01-30T10:00:09.553Z'",
    "description": "Comparison operator with dates for a single column",
    "expected_sql_dialect_based": {
      "sqlite": "created_at >= datetime('2025-01-30 10:00:09')",
      "mysql": "created_at >= CAST('2025-01-30 10:00:09' as DATETIME)",
      "postgresql": "created_at >= CAST('2025-01-30 10:00:09' as TIMESTAMP)"
    }
  },
  {
    "input_cel": "alert.randomDate >= '2025-01-30T10:00:09.553Z'",
    "description": "Comparison operator with dates for a JSON multiple columns",
    "expected_sql_dialect_based": {
      "sqlite": "COALESCE(json_extract(alert_enrichments, '$.\"randomDate\"'), json_extract(alert_event, '$.\"randomDate\"')) >= datetime('2025-01-30 10:00:09')",
      "mysql": "COALESCE(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"randomDate\"')), JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"randomDate\"'))) >= CAST('2025-01-30 10:00:09' as DATETIME)",
      "postgresql": "COALESCE(((alert_enrichments) ->> 'randomDate')::TIMESTAMP, ((alert_event) ->> 'randomDate')::TIMESTAMP) >= CAST('2025-01-30 10:00:09' as TIMESTAMP)"
    }
  },
  {
    "input_cel": "alert.count > 7.84",
    "description": "Greater than with float",
    "expected_sql_dialect_based": {
      "sqlite": "COALESCE(CAST(json_extract(alert_enrichments, '$.\"count\"') as REAL), CAST(json_extract(alert_event, '$.\"count\"') as REAL)) > 7.84",
      "mysql": "COALESCE(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"count\"')), JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"count\"'))) > 7.84",
      "postgresql": "COALESCE(((alert_enrichments) ->> 'count')::FLOAT, ((alert_event) ->> 'count')::FLOAT) > 7.84"
    }
  },
  {
    "input_cel": "severity >= 'medium'",
    "description": "Greater than or equal comparison operator with enum",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(severity as TEXT) in ('medium', 'high', 'critical')",
      "mysql": "severity in ('medium', 'high', 'critical')",
      "postgresql": "(severity)::TEXT in ('medium', 'high', 'critical')"
    }
  },
  {
    "input_cel": "severity > 'medium'",
    "description": "Greater than comparison operator with enum",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(severity as TEXT) in ('high', 'critical')",
      "mysql": "severity in ('high', 'critical')",
      "postgresql": "(severity)::TEXT in ('high', 'critical')"
    }
  },
  {
    "input_cel": "severity <= 'critical'",
    "description": "Less than than comparison operator with enum when constat is the last value in enum",
    "expected_sql_dialect_based": {
      "sqlite": "",
      "mysql": "",
      "postgresql": ""
    }
  },
  {
    "input_cel": "name == 'Payments incident' && severity <= 'critical'",
    "description": "AND with less than than comparison operator with enum when constat is the last value in enum",
    "expected_sql_dialect_based": {
      "sqlite": "COALESCE(user_generated_name, ai_generated_name) = 'Payments incident'",
      "mysql": "COALESCE(user_generated_name, ai_generated_name) = 'Payments incident'",
      "postgresql": "COALESCE(user_generated_name, ai_generated_name) = 'Payments incident'"
    }
  },
  {
    "input_cel": "severity > 'critical'",
    "description": "Greater than comparison operator with enum when constat is the last value in enum",
    "expected_sql_dialect_based": {
      "sqlite": "false",
      "mysql": "FALSE",
      "postgresql": "false"
    }
  },
  {
    "input_cel": "name == 'Payments incident' && severity > 'critical'",
    "description": "AND with greater than comparison operator with enum when constat is the last value in enum",
    "expected_sql_dialect_based": {
      "sqlite": "(COALESCE(user_generated_name, ai_generated_name) = 'Payments incident' AND false)",
      "mysql": "(COALESCE(user_generated_name, ai_generated_name) = 'Payments incident' AND FALSE)",
      "postgresql": "(COALESCE(user_generated_name, ai_generated_name) = 'Payments incident' AND false)"
    }
  },
  {
    "input_cel": "alert.count <= 100",
    "description": "Less than or equal with integer",
    "expected_sql_dialect_based": {
      "sqlite": "COALESCE(CAST(json_extract(alert_enrichments, '$.\"count\"') as REAL), CAST(json_extract(alert_event, '$.\"count\"') as REAL)) <= 100",
      "mysql": "COALESCE(JSON_UNQUOTE(JSON_EXTRACT(alert_enrichments, '$.\"count\"')), JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"count\"'))) <= 100",
      "postgresql": "COALESCE(((alert_enrichments) ->> 'count')::FLOAT, ((alert_event) ->> 'count')::FLOAT) <= 100"
    }
  },
  {
    "input_cel": "severity < 'medium'",
    "description": "Less than comparison operator with enum",
    "expected_sql_dialect_based": {
      "sqlite": "NOT (CAST(severity as TEXT) in ('medium', 'high', 'critical'))",
      "mysql": "NOT (severity in ('medium', 'high', 'critical'))",
      "postgresql": "NOT ((severity)::TEXT in ('medium', 'high', 'critical'))"
    }
  },
  {
    "input_cel": "severity <= 'medium'",
    "description": "Less than or equal comparison operator with enum",
    "expected_sql_dialect_based": {
      "sqlite": "NOT (CAST(severity as TEXT) in ('high', 'critical'))",
      "mysql": "NOT (severity in ('high', 'critical'))",
      "postgresql": "NOT ((severity)::TEXT in ('high', 'critical'))"
    }
  },
  {
    "input_cel": "alert.tags.tagKey == 'tag value'",
    "description": "Prop is inside JSON column and nested",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') as TEXT) = 'tag value'",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) = 'tag value'",
      "postgresql": "((alert_event -> 'tagsContainer') ->> 'tagKey')::TEXT = 'tag value'"
    }
  },
  {
    "input_cel": "alert.tags.tagKey == 'with \"double-quotes\"'",
    "description": "When literal is with double-quoted substring",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') as TEXT) = 'with \"double-quotes\"'",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) = 'with \"double-quotes\"'",
      "postgresql": "((alert_event -> 'tagsContainer') ->> 'tagKey')::TEXT = 'with \"double-quotes\"'"
    }
  },
  {
    "input_cel": "alert.tags.tagKey == \"with 'double-quotes'\"",
    "description": "When literal is with quoted substring",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') as TEXT) = 'with ''double-quotes'''",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) = 'with ''double-quotes'''",
      "postgresql": "((alert_event -> 'tagsContainer') ->> 'tagKey')::TEXT = 'with ''double-quotes'''"
    }
  },
  {
    "input_cel": "alert.tags.tagKey == \"' OR alert.provider_type == 'grafana' OR'\"",
    "description": "When literal contains SQL injection",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') as TEXT) = ''' OR alert.provider_type == ''grafana'' OR'''",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) = ''' OR alert.provider_type == ''grafana'' OR'''",
      "postgresql": "((alert_event -> 'tagsContainer') ->> 'tagKey')::TEXT = ''' OR alert.provider_type == ''grafana'' OR'''"
    }
  },
  {
    "input_cel": "alert.tags.tagKey.startsWith(\"with 'single-quotes'\")",
    "description": "When startsWith is used with literal containing quoted substring",
    "expected_sql_dialect_based": {
      "sqlite": "json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') IS NOT NULL AND json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') LIKE 'with ''single-quotes''%'",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"'))) LIKE 'with ''single-quotes''%'",
      "postgresql": "(alert_event -> 'tagsContainer') ->> 'tagKey' IS NOT NULL AND (alert_event -> 'tagsContainer') ->> 'tagKey' ILIKE 'with ''single-quotes''%'"
    }
  },
  {
    "input_cel": "alert.tags.tagKey.endsWith(\"with 'single-quotes'\")",
    "description": "When endsWith is used with literal containing quoted substring",
    "expected_sql_dialect_based": {
      "sqlite": "json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') IS NOT NULL AND json_extract(alert_event, '$.\"tagsContainer\".\"tagKey\"') LIKE '%with ''single-quotes'''",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"')) IS NOT NULL AND LOWER(JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"tagKey\"'))) LIKE '%with ''single-quotes'''",
      "postgresql": "(alert_event -> 'tagsContainer') ->> 'tagKey' IS NOT NULL AND (alert_event -> 'tagsContainer') ->> 'tagKey' ILIKE '%with ''single-quotes'''"
    }
  },
  {
    "input_cel": "alert.tags['some tags.dot(&?:;'].tagKey == 'tag value'",
    "description": "Index property access is with space and special chars",
    "expected_sql_dialect_based": {
      "sqlite": "CAST(json_extract(alert_event, '$.\"tagsContainer\".\"some tags.dot(&?:;\".\"tagKey\"') as TEXT) = 'tag value'",
      "mysql": "JSON_UNQUOTE(JSON_EXTRACT(alert_event, '$.\"tagsContainer\".\"some tags.dot(&?:;\".\"tagKey\"')) = 'tag value'",
      "postgresql": "((alert_event -> 'tagsContainer' -> 'some tags.dot(&?:;') ->> 'tagKey')::TEXT = 'tag value'"
    }
  },
  {
    "input_cel": "id == '123e4567-e89b-12d3-a456-426614174000'",
    "description": "UUID property access with dashed UUID",
    "expected_sql_dialect_based": {
      "sqlite": "entityId = '123e4567e89b12d3a456426614174000'",
      "mysql": "entityId = '123e4567e89b12d3a456426614174000'",
      "postgresql": "entityId = '123e4567-e89b-12d3-a456-426614174000'"
    }
  },
  {
    "input_cel": "id == '123e4567e89b12d3a456426614174000'",
    "description": "UUID property access with HEX UUID",
    "expected_sql_dialect_based": {
      "sqlite": "entityId = '123e4567e89b12d3a456426614174000'",
      "mysql": "entityId = '123e4567e89b12d3a456426614174000'",
      "postgresql": "entityId = '123e4567-e89b-12d3-a456-426614174000'"
    }
  }
]
