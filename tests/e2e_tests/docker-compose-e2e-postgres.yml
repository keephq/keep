services:
  ## Keep Services with NO_AUTH
  # Database Service
  keep-database:
    image: postgres:13
    environment:
      POSTGRES_USER: keepuser
      POSTGRES_PASSWORD: keeppassword
      POSTGRES_DB: keepdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-custom.conf:/etc/postgresql/conf.d/custom.conf
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # Frontend Services
  keep-frontend:
    extends:
      file: docker-compose.common.yml
      service: keep-frontend-common
    build:
      context: ./keep-ui/
      dockerfile: ../docker/Dockerfile.ui
    environment:
      - AUTH_TYPE=NO_AUTH
      - API_URL=http://keep-backend:8080
      - POSTHOG_DISABLED=true
      - FRIGADE_DISABLED=true
      - SENTRY_DISABLED=true

  # Backend Services
  keep-backend:
    extends:
      file: docker-compose.common.yml
      service: keep-backend-common
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    environment:
      - AUTH_TYPE=NO_AUTH
      - DATABASE_CONNECTION_STRING=postgresql+psycopg2://keepuser:keeppassword@keep-database:5432/keepdb
      - POSTHOG_DISABLED=true
      - FRIGADE_DISABLED=true
      - SECRET_MANAGER_DIRECTORY=/app
      - SQLALCHEMY_WARN_20=1
    depends_on:
      - keep-database

  ## Keep Services with DB
  # Database Service (5433)
  keep-database-db-auth:
    image: postgres:13
    environment:
      POSTGRES_USER: keepuser
      POSTGRES_PASSWORD: keeppassword
      POSTGRES_DB: keepdb
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql-auth-db/data
      - ./postgres-custom.conf:/etc/postgresql-auth-db/conf.d/custom.conf
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # Frontend Services (3001)
  keep-frontend-db-auth:
    build:
      context: ./keep-ui/
      dockerfile: ../docker/Dockerfile.ui
    ports:
      - "3001:3000"
    environment:
      - NEXTAUTH_SECRET=secret
      - NEXTAUTH_URL=http://localhost:3001
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - POSTHOG_DISABLED=true
      - AUTH_TYPE=DB
      - API_URL=http://keep-backend-db-auth:8080
      - POSTHOG_DISABLED=true
      - FRIGADE_DISABLED=true
      - SENTRY_DISABLED=true

  # Backend Services (8081)
  keep-backend-db-auth:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - SECRET_MANAGER_TYPE=FILE
      - SECRET_MANAGER_DIRECTORY=/state
      - OPENAI_API_KEY=$OPENAI_API_KEY
      - PUSHER_APP_ID=1
      - PUSHER_APP_KEY=keepappkey
      - PUSHER_APP_SECRET=keepappsecret
      - PUSHER_HOST=keep-websocket-server
      - PUSHER_PORT=6001
      - USE_NGROK=false
      - AUTH_TYPE=DB
      - DATABASE_CONNECTION_STRING=postgresql+psycopg2://keepuser:keeppassword@keep-database-db-auth:5432/keepdb
      - POSTHOG_DISABLED=true
      - FRIGADE_DISABLED=true
      - SECRET_MANAGER_DIRECTORY=/app
      - SQLALCHEMY_WARN_20=1
      - KEEP_JWT_SECRET=verysecretkey
      - KEEP_DEFAULT_USERNAME=keep
      - KEEP_DEFAULT_PASSWORD=keep
    depends_on:
      - keep-database-db-auth

  # Other Services (Common)
  keep-websocket-server:
    extends:
      file: docker-compose.common.yml
      service: keep-websocket-server-common

  prometheus-server-for-test-target:
    image: prom/prometheus
    volumes:
      - ./tests/e2e_tests/test_pushing_prometheus_config.yaml:/etc/prometheus/prometheus.yml
      - ./tests/e2e_tests/test_pushing_prometheus_rules.yaml:/etc/prometheus/test_pushing_prometheus_rules.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-enterprise:11.4.0
    user: "472" # Grafana's default user ID
    ports:
      - "3002:3000"
    volumes:
      - ./keep/providers/grafana_provider/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./tests/e2e_tests/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus-server-for-test-target

volumes:
  postgres-data:
  grafana-storage: {}
